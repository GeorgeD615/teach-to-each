// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TeachToEach.DAL;

#nullable disable

namespace TeachToEach.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231210160751_InitialDatabase")]
    partial class InitialDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TeachToEach.Domain.Entity.Homework", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("homework_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("deadline")
                        .HasColumnType("text")
                        .HasColumnName("deadline");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("text");

                    b.Property<bool>("is_completed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bool")
                        .HasDefaultValue(false)
                        .HasColumnName("is_completed");

                    b.Property<int>("relation_id")
                        .HasColumnType("integer");

                    b.Property<string>("solution")
                        .HasColumnType("text")
                        .HasColumnName("solution");

                    b.Property<string>("solution_time")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("solution_time");

                    b.Property<string>("teacher_comment")
                        .HasColumnType("text")
                        .HasColumnName("teacher_comment");

                    b.HasKey("id");

                    b.HasIndex("relation_id");

                    b.ToTable("Homeworks");
                });

            modelBuilder.Entity("TeachToEach.Domain.Entity.Rating", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rating_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<short>("rating_value")
                        .HasColumnType("smallint")
                        .HasColumnName("value");

                    b.Property<int>("relation_id")
                        .HasColumnType("integer");

                    b.Property<string>("review")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("text")
                        .HasColumnName("review");

                    b.HasKey("id");

                    b.HasIndex("relation_id")
                        .IsUnique();

                    b.ToTable("Ratings");

                    b.HasCheckConstraint("value", "value > 0 AND value < 6");
                });

            modelBuilder.Entity("TeachToEach.Domain.Entity.Role", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.HasKey("id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            id = 1,
                            name = "User"
                        },
                        new
                        {
                            id = 2,
                            name = "Moderator"
                        },
                        new
                        {
                            id = 3,
                            name = "Admin"
                        });
                });

            modelBuilder.Entity("TeachToEach.Domain.Entity.StatusOfRelation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.HasKey("id");

                    b.ToTable("StatusOfRelations");

                    b.HasData(
                        new
                        {
                            id = 1,
                            name = "Заявка на рассмотрении"
                        },
                        new
                        {
                            id = 2,
                            name = "Заявка принята"
                        },
                        new
                        {
                            id = 3,
                            name = "Заявка отклонена"
                        });
                });

            modelBuilder.Entity("TeachToEach.Domain.Entity.Subject", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.HasKey("id");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            id = 1,
                            name = "Математика"
                        },
                        new
                        {
                            id = 2,
                            name = "Литература"
                        },
                        new
                        {
                            id = 3,
                            name = "Биология"
                        },
                        new
                        {
                            id = 4,
                            name = "История"
                        },
                        new
                        {
                            id = 5,
                            name = "Обществознание"
                        },
                        new
                        {
                            id = 6,
                            name = "Английский язык"
                        });
                });

            modelBuilder.Entity("TeachToEach.Domain.Entity.TeacherStudent", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("relation_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("status_id")
                        .HasColumnType("integer");

                    b.Property<int>("student_id")
                        .HasColumnType("integer");

                    b.Property<int>("subject_id")
                        .HasColumnType("integer");

                    b.Property<int>("teacher_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("status_id");

                    b.HasIndex("student_id");

                    b.HasIndex("subject_id");

                    b.HasIndex("teacher_id");

                    b.ToTable("TeacherStudentRelation");

                    b.HasCheckConstraint("teacher_id", "teacher_id <> student_id");
                });

            modelBuilder.Entity("TeachToEach.Domain.Entity.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<short>("age")
                        .HasColumnType("smallint")
                        .HasColumnName("age");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("first_name");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("last_name");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasColumnType("character varying(32)")
                        .HasColumnName("login");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int>("role_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("role_id");

                    b.ToTable("Users");

                    b.HasCheckConstraint("age", "age > 7 AND age < 121");

                    b.HasData(
                        new
                        {
                            id = 1,
                            age = (short)20,
                            email = "g.davlyatshin@gmail.com",
                            first_name = "Георгий",
                            last_name = "Давлятшин",
                            login = "davlik2003",
                            password = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
                            role_id = 3
                        });
                });

            modelBuilder.Entity("TeachToEach.Domain.Entity.Homework", b =>
                {
                    b.HasOne("TeachToEach.Domain.Entity.TeacherStudent", "relation")
                        .WithMany("homeworks")
                        .HasForeignKey("relation_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("relation");
                });

            modelBuilder.Entity("TeachToEach.Domain.Entity.Rating", b =>
                {
                    b.HasOne("TeachToEach.Domain.Entity.TeacherStudent", "relation")
                        .WithOne("rating")
                        .HasForeignKey("TeachToEach.Domain.Entity.Rating", "relation_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("relation");
                });

            modelBuilder.Entity("TeachToEach.Domain.Entity.TeacherStudent", b =>
                {
                    b.HasOne("TeachToEach.Domain.Entity.StatusOfRelation", "status")
                        .WithMany("relations")
                        .HasForeignKey("status_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachToEach.Domain.Entity.User", "student")
                        .WithMany("relation_as_student")
                        .HasForeignKey("student_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachToEach.Domain.Entity.Subject", "subject")
                        .WithMany("teacher_student_relations")
                        .HasForeignKey("subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachToEach.Domain.Entity.User", "teacher")
                        .WithMany("relation_as_teacher")
                        .HasForeignKey("teacher_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("status");

                    b.Navigation("student");

                    b.Navigation("subject");

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("TeachToEach.Domain.Entity.User", b =>
                {
                    b.HasOne("TeachToEach.Domain.Entity.Role", "role")
                        .WithMany("users")
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("role");
                });

            modelBuilder.Entity("TeachToEach.Domain.Entity.Role", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("TeachToEach.Domain.Entity.StatusOfRelation", b =>
                {
                    b.Navigation("relations");
                });

            modelBuilder.Entity("TeachToEach.Domain.Entity.Subject", b =>
                {
                    b.Navigation("teacher_student_relations");
                });

            modelBuilder.Entity("TeachToEach.Domain.Entity.TeacherStudent", b =>
                {
                    b.Navigation("homeworks");

                    b.Navigation("rating")
                        .IsRequired();
                });

            modelBuilder.Entity("TeachToEach.Domain.Entity.User", b =>
                {
                    b.Navigation("relation_as_student");

                    b.Navigation("relation_as_teacher");
                });
#pragma warning restore 612, 618
        }
    }
}
